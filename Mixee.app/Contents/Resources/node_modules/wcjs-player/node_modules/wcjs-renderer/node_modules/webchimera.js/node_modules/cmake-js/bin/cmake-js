#!/usr/bin/env node
"use strict";

var log = require("npmlog");
var _ = require("lodash");
var BuildSystem = require("../lib/buildSystem");
var util = require("util");

var version = require("../package").version;
var logLevels = ["silly", "verbose", "info", "http", "warn", "error"];
var yargs = require("yargs")
    .usage("CMake.js " + version + "\n\nUsage: $0 [<command>] [options]")
    .version(function () {
        return version;
    })
    .command("install", "Install Node.js/io.js distribution files if needed")
    .command("configure", "Configure CMake project")
    .command("print-configure", "Print the configuration command")
    .command("build", "Build the project")
    .command("print-build", "Print the build command")
    .command("clean", "Clean the project directory")
    .command("print-clean", "Print the clean command")
    .command("reconfigure", "Clean the project directory then configure the project")
    .command("rebuild", "Clean the project directory then build the project")
    .options({
        h: {
            alias: "help",
            demand: false,
            describe: "show this screen",
            type: "boolean"
        },
        l: {
            alias: "log-level",
            demand: false,
            describe: "set log level (" + logLevels.join(", ") + "), default is info",
            type: "string"
        },
        d: {
            alias: "directory",
            demand: false,
            describe: "specify CMake project's directory (where CMakeLists.txt located)",
            type: "string"
        },
        D: {
            alias: "debug",
            demand: false,
            describe: "build debug configuration",
            type: "boolean"
        },
        c: {
            alias: "cmake-path",
            demand: false,
            describe: "path of CMake executable",
            type: "string"
        },
        m: {
            alias: "prefer-make",
            demand: false,
            describe: "use Unix Makefiles even if Ninja is available (Posix)",
            type: "boolean"
        },
        g: {
            alias: "prefer-gnu",
            demand: false,
            describe: "use GNU compiler even if Clang is available (Posix)",
            type: "boolean"
        },
        o: {
            alias: "prec11",
            demand: false,
            describe: "do not force the c++11 flag, for compatibility with older systems",
            type: "boolean"
        },
        r: {
            alias: "runtime",
            demand: false,
            describe: "the runtime to use",
            type: "string"
        },
        v: {
            alias: "runtime-version",
            demand: false,
            describe: "the runtime version to use",
            type: "string"
        },
        a: {
            alias: "arch",
            demand: false,
            describe: "the architecture to build in",
            type: "string"
        }
    });
var argv = yargs.argv;

// If help, then print and exit:

if (argv.h) {
    console.info(yargs.help());
    return;
}

// Setup log level:

if (argv.l && _.contains(logLevels, argv.l)) {
    log.level = argv.l;
    log.resume();
}

log.silly("CON", "argv:");
log.silly("CON", util.inspect(argv));

log.verbose("CON", "Parsing arguments");

var options = {
    directory: argv.directory || null,
    debug: argv.debug,
    cmakePath: argv.c || null,
    preferMake: argv.m,
    preferGnu: argv.g,
    forceNoC11: argv.o,
    runtime: argv.r,
    runtimeVersion: argv.v,
    arch: argv.a
};

log.verbose("CON", "options:");
log.verbose("CON", util.inspect(options));

var command = _.first(argv._) || "build";

log.verbose("CON", "Running command: " + command);

var buildSystem = new BuildSystem(options);

function ifCommand(c, f) {
    if (c === command) {
        f();
        return true;
    }
    return false;
}

function exitOnError(promise) {
    promise.catch(function () {
        process.exit(1);
    });
}

function install() { exitOnError(buildSystem.install()); }
function configure() { exitOnError(buildSystem.configure()); }
function printConfigure() {
    exitOnError(buildSystem.getConfigureCommand()
        .then(function (command) {
            console.info(command);
        }));
}
function build() { buildSystem.build(); }
function printBuild() {
    exitOnError(buildSystem.getBuildCommand()
        .then(function (command) {
            console.info(command);
        }));
}
function clean() { buildSystem.clean(); }
function printClean() {
    exitOnError(buildSystem.getCleanCommand()
        .then(function (command) {
            console.info(command);
        }));
}
function reconfigure() { exitOnError(buildSystem.reconfigure()); }
function rebuild() { exitOnError(buildSystem.rebuild()); }

var done = ifCommand("install", install);
done = done || ifCommand("configure", configure);
done = done || ifCommand("print-configure", printConfigure);
done = done || ifCommand("build", build);
done = done || ifCommand("print-build", printBuild);
done = done || ifCommand("clean", clean);
done = done || ifCommand("print-clean", printClean);
done = done || ifCommand("reconfigure", reconfigure);
done = done || ifCommand("rebuild", rebuild);
if (!done) {
    if (command) {
        log.error("COM", "Unknown command: " + command);
        process.exit(1);
    }
    else {
        build();
    }
}
